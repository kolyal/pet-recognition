import base64
import logging
from io import BytesIO
import requests
import torch
import torchvision.transforms as transforms
from fastapi import FastAPI, Form, HTTPException, UploadFile, File
from fastapi.responses import HTMLResponse
from PIL import Image
from pydantic import BaseModel
from torch import nn
from torchvision import models

# –ú–æ–¥–µ–ª—å pydantic –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ URL –∞–¥—Ä–µ—Å–∞
class ImageRequest(BaseModel):
    image_url: str

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI()

DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu") # –≤—ã–±–æ—Ä –¥–µ–≤–∞–π—Å–∞ (–¥–ª—è –ø—Ä–µ–¥–∏–∫—Ç–æ–≤ –Ω–∞ —É—Å–∏–ª–∏—Ç–µ–ª—è—Ö)
MODEL_PATH = "best_model.pth"
CLASSES = 37 # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–∫ –∫–ª–∞—Å—Å–∞ –¥–ª—è –¥–∞—Ç–∞—Å–µ—Ç–∞ Oxford-IIIT Pet Dataset
class_names = ['Abyssinian', 'American Bulldog', 'American Pit Bull Terrier', 'Basset Hound', 'Beagle', 'Bengal', 'Birman', 'Bombay', 'Boxer', 'British Shorthair',
                        'Chihuahua', 'Egyptian Mau', 'English Cocker Spaniel', 'English Setter', 'German Shorthaired', 'Great Pyrenees', 'Havanese', 'Japanese Chin',
                        'Keeshond', 'Leonberger', 'Maine Coon', 'Miniature Pinscher', 'Newfoundland', 'Persian', 'Pomeranian', 'Pug', 'Ragdoll', 'Russian Blue',
                        'Saint Bernard', 'Samoyed', 'Scottish Terrier', 'Shiba Inu', 'Siamese', 'Sphynx', 'Staffordshire Bull Terrier', 'Wheaten Terrier',
                        'Yorkshire Terrier'] # –º–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤ –ø—Ä–∏—à–ª–æ—Å—å –≤—ã—Ç–∞—â–∏—Ç—å, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –¥–∞—Ç–∞—Å–µ—Ç

def load_model():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å EfficientNet-B4 –∏ –¥–æ–æ–±—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π.
    –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –∏–∑ —Ñ–∞–π–ª–∞ `MODEL_PATH`, –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è –≤ —Ä–µ–∂–∏–º –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞.
    –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ—Ç –æ—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –∏—Ö.
    """
    try:
        model = models.efficientnet_b4(pretrained=False)
        model.classifier[1] = nn.Linear(model.classifier[1].in_features, CLASSES) # –¥–æ–æ–±—É—á–µ–Ω–∏–µ efficientnet_b4 –¥–ª—è –º–æ–µ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞

        model.load_state_dict(torch.load(MODEL_PATH, map_location=DEVICE))
        model = model.to(DEVICE)
        model.eval()

        logger.info("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        return model
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å: {str(e)}")

def predict_image(model, image_tensor, class_names):
    """
    –ü—Ä–∏–º–µ–Ω—è–µ—Ç –º–æ–¥–µ–ª—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é.

    :param model: –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
    :param image_tensor: –¢–µ–Ω–∑–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :param class_names: –ú–µ—Ç–∫–∏ –∫–ª–∞—Å—Å–æ–≤
    :return: –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞ (–ø–æ—Ä–æ–¥—ã), —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏
    """
    with torch.no_grad():
        output = model(image_tensor)
        _, predicted = torch.max(output, 1)
        class_idx = predicted.item()
        confidence = torch.nn.functional.softmax(output, dim=1)[0][class_idx].item()
        return class_names[class_idx], confidence

def image_to_base64(img: Image.Image) -> str:
    """
    –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ PIL –≤ —Å—Ç—Ä–æ–∫—É base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ API/–≤–µ–±.
    –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ PNG –≤ –ø–∞–º—è—Ç–∏, –∑–∞—Ç–µ–º –∫–æ–¥–∏—Ä—É–µ—Ç
    –µ–≥–æ –≤ —Å—Ç—Ä–æ–∫—É base64, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ HTML, JSON –∏–ª–∏ API.

    :param img: –í—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PIL.Image.
    :return: –°—Ç—Ä–æ–∫–∞ base64, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG.
    """
    buffered = BytesIO()
    img.save(buffered, format="PNG")
    return base64.b64encode(buffered.getvalue()).decode()


model = load_model() # –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏

transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
]) # —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

@app.get("/", response_class=HTMLResponse)
async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–µ—Ä–≤–∏—Å–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –¥–≤—É–º—è —Ñ–æ—Ä–º–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:
    1. –ß–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π URL
    2. –ß–µ—Ä–µ–∑ –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–∞ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    """
    return """
    <html>
        <head>
            <title>–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background-color: #f9f9f9;
                    color: #333;
                    display: flex;
                    flex-direction: column;
                    align-items: center;
                }
                h2 {
                    margin-top: 40px;
                    color: #444;
                }
                form {
                    margin-top: 20px;
                    margin-bottom: 40px;
                    padding: 20px;
                    border: 1px solid #ddd;
                    border-radius: 10px;
                    background-color: #fff;
                    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                    width: 100%;
                    max-width: 500px;
                }
                input[type="text"], input[type="file"] {
                    width: 100%;
                    padding: 10px;
                    margin-top: 10px;
                    margin-bottom: 15px;
                    border: 1px solid #ccc;
                    border-radius: 5px;
                }
                input[type="submit"] {
                    padding: 10px 20px;
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                }
                input[type="submit"]:hover {
                    background-color: #45a049;
                }
                @media (prefers-color-scheme: dark) {
                    body {
                        background-color: #121212;
                        color: #eee;
                    }
                    form {
                        background-color: #1e1e1e;
                        border: 1px solid #333;
                    }
                    input[type="text"], input[type="file"] {
                        background-color: #2c2c2c;
                        color: white;
                        border: 1px solid #444;
                    }
                    input[type="submit"] {
                        background-color: #388e3c;
                    }
                    input[type="submit"]:hover {
                        background-color: #2e7d32;
                    }
                }
            </style>
        </head>
        <body>
            <h1>üê∂üê± –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ</h1>

            <form action="/predict/" method="post">
                <label for="image_url"><strong>–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</strong></label>
                <input type="text" name="image_url" id="image_url" placeholder="https://example.com/cat.jpg" required>
                <input type="submit" value="–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ URL">
            </form>

            <form action="/predict/upload/" enctype="multipart/form-data" method="post">
                <label for="file"><strong>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:</strong></label>
                <input type="file" name="file" id="file" accept="image/*" required>
                <input type="submit" value="–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ —Ñ–∞–π–ª—É">
            </form>
        </body>
    </html>
    """


@app.post("/predict/", response_class=HTMLResponse)
async def predict_from_form(image_url: str = Form(...)):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ
    –≤ —Ç–µ–Ω–∑–æ—Ä, –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –º–æ–¥–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏.
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ HTML –º–∞–∫–µ—Ç.

    :param image_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    :return: HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏.
    """
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {image_url}")
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()

        img = Image.open(BytesIO(response.content))
        if img.mode != 'RGB':
            img = img.convert('RGB')

        img_tensor = transform(img).unsqueeze(0).to(DEVICE)
        predicted_class, confidence = predict_image(model, img_tensor, class_names)

        result = f"""
        <html>
            <head>
                <title>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</title>
                <style>
                    body {{
                        font-family: Arial, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background-color: #f9f9f9;
                        color: #333;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                    }}
                    h2 {{
                        margin-top: 40px;
                        color: #444;
                    }}
                    .result {{
                        margin-top: 30px;
                        padding: 20px;
                        border: 1px solid #ddd;
                        border-radius: 10px;
                        background-color: #fff;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                        max-width: 500px;
                        width: 100%;
                        text-align: center;
                    }}
                    img {{
                        margin-top: 15px;
                        border-radius: 10px;
                        max-width: 100%;
                        height: auto;
                    }}
                    a {{
                        display: inline-block;
                        margin-top: 20px;
                        text-decoration: none;
                        padding: 10px 20px;
                        background-color: #4CAF50;
                        color: white;
                        border-radius: 5px;
                    }}
                    a:hover {{
                        background-color: #45a049;
                    }}
                    @media (prefers-color-scheme: dark) {{
                        body {{
                            background-color: #121212;
                            color: #eee;
                        }}
                        .result {{
                            background-color: #1e1e1e;
                            border: 1px solid #333;
                        }}
                        a {{
                            background-color: #388e3c;
                        }}
                        a:hover {{
                            background-color: #2e7d32;
                        }}
                    }}
                </style>
            </head>
            <body>
                <div class="result">
                    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</h2>
                    <p><strong>–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:</strong> {predicted_class}</p>
                    <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:</strong> {confidence:.2f}</p>
                    <img src="{image_url}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ">
                    <br>
                    <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
                </div>
            </body>
        </html>
        """

        logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ: {predicted_class} ({confidence:.2f})")
        return result

    except requests.exceptions.RequestException as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π URL: {str(e)}")
        return HTMLResponse(content=f"<p>–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. {str(e)}</p><a href='/'>–ù–∞–∑–∞–¥</a>", status_code=400)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
        return HTMLResponse(content=f"<p>–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}</p><a href='/'>–ù–∞–∑–∞–¥</a>", status_code=500)


@app.post("/predict/upload/", response_class=HTMLResponse)
async def predict_from_upload(file: UploadFile = File(...)):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ñ–æ—Ä–º—É, –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—Ä–æ–¥—É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ —Å –ø–æ–º–æ—â—å—é ML-–º–æ–¥–µ–ª–∏
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    :param file: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPEG, PNG, WEBP
    :return: –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –ø—Ä–µ–≤—å—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    """
    try:
        contents = await file.read()
        img = Image.open(BytesIO(contents))
        if img.mode != 'RGB':
            img = img.convert('RGB')

        img_tensor = transform(img).unsqueeze(0).to(DEVICE)
        predicted_class, confidence = predict_image(model, img_tensor, class_names)

        result = f"""
        <html>
            <head>
                <title>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</title>
                <style>
                    body {{
                        font-family: Arial, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background-color: #f9f9f9;
                        color: #333;
                        display: flex;
                        flex-direction: column;
                        align-items: center;
                    }}
                    h2 {{
                        margin-top: 40px;
                        color: #444;
                    }}
                    .result {{
                        margin-top: 30px;
                        padding: 20px;
                        border: 1px solid #ddd;
                        border-radius: 10px;
                        background-color: #fff;
                        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
                        max-width: 500px;
                        width: 100%;
                        text-align: center;
                    }}
                    img {{
                        margin-top: 15px;
                        border-radius: 10px;
                        max-width: 100%;
                        height: auto;
                    }}
                    a {{
                        display: inline-block;
                        margin-top: 20px;
                        text-decoration: none;
                        padding: 10px 20px;
                        background-color: #4CAF50;
                        color: white;
                        border-radius: 5px;
                    }}
                    a:hover {{
                        background-color: #45a049;
                    }}
                    @media (prefers-color-scheme: dark) {{
                        body {{
                            background-color: #121212;
                            color: #eee;
                        }}
                        .result {{
                            background-color: #1e1e1e;
                            border: 1px solid #333;
                        }}
                        a {{
                            background-color: #388e3c;
                        }}
                        a:hover {{
                            background-color: #2e7d32;
                        }}
                    }}
                </style>
            </head>
            <body>
                <div class="result">
                    <h2>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è</h2>
                    <p><strong>–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ:</strong> {predicted_class}</p>
                    <p><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏:</strong> {confidence:.2f}</p>
                    <img src="data:image/png;base64,{image_to_base64(img)}" alt="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ">
                    <br>
                    <a href="/">‚Üê –ù–∞–∑–∞–¥</a>
                </div>
            </body>
        </html>
        """

        return result

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø–æ —Ñ–∞–π–ª—É: {str(e)}")
        return HTMLResponse(content=f"<p>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}</p><a href='/'>–ù–∞–∑–∞–¥</a>", status_code=400)


@app.post("/predict/json/")
async def predict_from_url(request: ImageRequest):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –ø–æ—Ä–æ–¥—ã –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.

    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –µ–≥–æ
    –≤ —Ç–µ–Ω–∑–æ—Ä, –ø–µ—Ä–µ–¥–∞–µ—Ç –≤ –º–æ–¥–µ–ª—å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏.
    –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ requests, curl –±–µ–∑ HTML

    :param request: URL –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    :return: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –º–æ–¥–µ–ª–∏.
    """
    image_url = request.image_url
    try:
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ URL: {image_url}")
        response = requests.get(image_url, timeout=10)
        response.raise_for_status()

        img = Image.open(BytesIO(response.content))
        if img.mode != 'RGB':
            img = img.convert('RGB')

        img_tensor = transform(img).unsqueeze(0).to(DEVICE)
        predicted_class, confidence = predict_image(model, img_tensor, class_names)

        result = {
            "–ñ–∏–≤–æ—Ç–Ω–æ–µ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ: ": predicted_class,
            "–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: ": float(confidence)
        }

        logger.info(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ: {result}")
        return result

    except requests.exceptions.RequestException as e:
        logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π URL: {str(e)}")
        raise HTTPException(status_code=400, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {str(e)}")
        raise HTTPException(status_code=500, detail=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {str(e)}")


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="0.0.0.0", port=8000)